// Code generated by inspc. DO NOT EDIT.
// source: github.com/koykov/versus/inspector2

package inspector2_ins

import (
	"encoding/json"
	"github.com/koykov/inspector"
	"github.com/koykov/versus/inspector2"
	"strconv"
)

func init() {
	inspector.RegisterInspector("L1", L1Inspector{})
}

type L1Inspector struct {
	inspector.BaseInspector
}

func (i0 L1Inspector) TypeName() string {
	return "L1"
}

func (i0 L1Inspector) Get(src any, path ...string) (any, error) {
	var buf any
	err := i0.GetTo(src, &buf, path...)
	return buf, err
}

func (i0 L1Inspector) GetTo(src any, buf *any, path ...string) (err error) {
	if src == nil {
		return
	}
	var x *inspector2.L1
	_ = x
	if p, ok := src.(**inspector2.L1); ok {
		x = *p
	} else if p, ok := src.(*inspector2.L1); ok {
		x = p
	} else if v, ok := src.(inspector2.L1); ok {
		x = &v
	} else {
		return
	}
	if len(path) == 0 {
		*buf = &(*x)
		return
	}

	if len(path) > 0 {
		if path[0] == "L2" {
			x0 := x.L2
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				if path[1] == "L3" {
					x1 := x0.L3
					_ = x1
					if len(path) > 2 {
						if x1 == nil {
							return
						}
						if path[2] == "S" {
							*buf = &x1.S
							return
						}
						if path[2] == "I" {
							*buf = &x1.I
							return
						}
						if path[2] == "F" {
							*buf = &x1.F
							return
						}
					}
					*buf = &x0.L3
					return
				}
			}
			*buf = &x.L2
			return
		}
	}
	return
}

func (i0 L1Inspector) Compare(src any, cond inspector.Op, right string, result *bool, path ...string) (err error) {
	if len(path) == 0 {
		return
	}
	if src == nil {
		return
	}
	var x *inspector2.L1
	_ = x
	if p, ok := src.(**inspector2.L1); ok {
		x = *p
	} else if p, ok := src.(*inspector2.L1); ok {
		x = p
	} else if v, ok := src.(inspector2.L1); ok {
		x = &v
	} else {
		return
	}

	if len(path) > 0 {
		if path[0] == "L2" {
			x0 := x.L2
			_ = x0
			if right == inspector.Nil {
				if cond == inspector.OpEq {
					*result = x0 == nil
				} else {
					*result = x0 != nil
				}
				return
			}
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				if path[1] == "L3" {
					x1 := x0.L3
					_ = x1
					if right == inspector.Nil {
						if cond == inspector.OpEq {
							*result = x1 == nil
						} else {
							*result = x1 != nil
						}
						return
					}
					if len(path) > 2 {
						if x1 == nil {
							return
						}
						if path[2] == "S" {
							var rightExact string
							rightExact = right

							switch cond {
							case inspector.OpEq:
								*result = x1.S == rightExact
							case inspector.OpNq:
								*result = x1.S != rightExact
							case inspector.OpGt:
								*result = x1.S > rightExact
							case inspector.OpGtq:
								*result = x1.S >= rightExact
							case inspector.OpLt:
								*result = x1.S < rightExact
							case inspector.OpLtq:
								*result = x1.S <= rightExact
							}
							return
						}
						if path[2] == "I" {
							var rightExact int64
							t1, err1 := strconv.ParseInt(right, 0, 0)
							if err1 != nil {
								return err1
							}
							rightExact = int64(t1)
							switch cond {
							case inspector.OpEq:
								*result = x1.I == rightExact
							case inspector.OpNq:
								*result = x1.I != rightExact
							case inspector.OpGt:
								*result = x1.I > rightExact
							case inspector.OpGtq:
								*result = x1.I >= rightExact
							case inspector.OpLt:
								*result = x1.I < rightExact
							case inspector.OpLtq:
								*result = x1.I <= rightExact
							}
							return
						}
						if path[2] == "F" {
							var rightExact float64
							t2, err2 := strconv.ParseFloat(right, 0)
							if err2 != nil {
								return err2
							}
							rightExact = float64(t2)
							switch cond {
							case inspector.OpEq:
								*result = x1.F == rightExact
							case inspector.OpNq:
								*result = x1.F != rightExact
							case inspector.OpGt:
								*result = x1.F > rightExact
							case inspector.OpGtq:
								*result = x1.F >= rightExact
							case inspector.OpLt:
								*result = x1.F < rightExact
							case inspector.OpLtq:
								*result = x1.F <= rightExact
							}
							return
						}
					}
				}
			}
		}
	}
	return
}

func (i0 L1Inspector) Loop(src any, l inspector.Iterator, buf *[]byte, path ...string) (err error) {
	if len(path) == 0 {
		return
	}
	if src == nil {
		return
	}
	var x *inspector2.L1
	_ = x
	if p, ok := src.(**inspector2.L1); ok {
		x = *p
	} else if p, ok := src.(*inspector2.L1); ok {
		x = p
	} else if v, ok := src.(inspector2.L1); ok {
		x = &v
	} else {
		return
	}

	if len(path) > 0 {
		if path[0] == "L2" {
			x0 := x.L2
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return
				}
				if path[1] == "L3" {
					x1 := x0.L3
					_ = x1
					if len(path) > 2 {
						if x1 == nil {
							return
						}
					}
				}
			}
		}
	}
	return
}

func (i0 L1Inspector) SetWithBuffer(dst, value any, buf inspector.AccumulativeBuffer, path ...string) error {
	if len(path) == 0 {
		return nil
	}
	if dst == nil {
		return nil
	}
	var x *inspector2.L1
	_ = x
	if p, ok := dst.(**inspector2.L1); ok {
		x = *p
	} else if p, ok := dst.(*inspector2.L1); ok {
		x = p
	} else if v, ok := dst.(inspector2.L1); ok {
		x = &v
	} else {
		return nil
	}

	if len(path) > 0 {
		if path[0] == "L2" {
			x0 := x.L2
			if uvalue, ok := value.(*inspector2.L2); ok {
				x0 = uvalue
			}
			if x0 == nil {
				x0 = &inspector2.L2{}
				x.L2 = x0
			}
			_ = x0
			if len(path) > 1 {
				if x0 == nil {
					return nil
				}
				if path[1] == "L3" {
					x1 := x0.L3
					if uvalue, ok := value.(*inspector2.L3); ok {
						x1 = uvalue
					}
					if x1 == nil {
						x1 = &inspector2.L3{}
						x0.L3 = x1
					}
					_ = x1
					if len(path) > 2 {
						if x1 == nil {
							return nil
						}
						if path[2] == "S" {
							inspector.AssignBuf(&x1.S, value, buf)
							return nil
						}
						if path[2] == "I" {
							inspector.AssignBuf(&x1.I, value, buf)
							return nil
						}
						if path[2] == "F" {
							inspector.AssignBuf(&x1.F, value, buf)
							return nil
						}
					}
					x0.L3 = x1
				}
			}
			x.L2 = x0
		}
	}
	return nil
}

func (i0 L1Inspector) Set(dst, value any, path ...string) error {
	return i0.SetWithBuffer(dst, value, nil, path...)
}

func (i0 L1Inspector) DeepEqual(l, r any) bool {
	return i0.DeepEqualWithOptions(l, r, nil)
}

func (i0 L1Inspector) DeepEqualWithOptions(l, r any, opts *inspector.DEQOptions) bool {
	var (
		lx, rx   *inspector2.L1
		leq, req bool
	)
	_, _, _, _ = lx, rx, leq, req
	if lp, ok := l.(**inspector2.L1); ok {
		lx, leq = *lp, true
	} else if lp, ok := l.(*inspector2.L1); ok {
		lx, leq = lp, true
	} else if lp, ok := l.(inspector2.L1); ok {
		lx, leq = &lp, true
	}
	if rp, ok := r.(**inspector2.L1); ok {
		rx, req = *rp, true
	} else if rp, ok := r.(*inspector2.L1); ok {
		rx, req = rp, true
	} else if rp, ok := r.(inspector2.L1); ok {
		rx, req = &rp, true
	}
	if !leq || !req {
		return false
	}
	if lx == nil && rx == nil {
		return true
	}
	if (lx == nil && rx != nil) || (lx != nil && rx == nil) {
		return false
	}

	lx1 := lx.L2
	rx1 := rx.L2
	_, _ = lx1, rx1
	if (lx1 == nil && rx1 != nil) || (lx1 != nil && rx1 == nil) {
		return false
	}
	if lx1 != nil && rx1 != nil {
		if inspector.DEQMustCheck("L2", opts) {
			lx2 := lx1.L3
			rx2 := rx1.L3
			_, _ = lx2, rx2
			if (lx2 == nil && rx2 != nil) || (lx2 != nil && rx2 == nil) {
				return false
			}
			if lx2 != nil && rx2 != nil {
				if inspector.DEQMustCheck("L2.L3", opts) {
					if lx2.S != rx2.S && inspector.DEQMustCheck("L2.L3.S", opts) {
						return false
					}
					if lx2.I != rx2.I && inspector.DEQMustCheck("L2.L3.I", opts) {
						return false
					}
					if !inspector.EqualFloat64(lx2.F, rx2.F, opts) && inspector.DEQMustCheck("L2.L3.F", opts) {
						return false
					}
				}
			}
		}
	}
	return true
}

func (i0 L1Inspector) Unmarshal(p []byte, typ inspector.Encoding) (any, error) {
	var x inspector2.L1
	switch typ {
	case inspector.EncodingJSON:
		err := json.Unmarshal(p, &x)
		return &x, err
	default:
		return nil, inspector.ErrUnknownEncodingType
	}
}

func (i0 L1Inspector) Copy(x any) (any, error) {
	var r inspector2.L1
	switch x.(type) {
	case inspector2.L1:
		r = x.(inspector2.L1)
	case *inspector2.L1:
		r = *x.(*inspector2.L1)
	case **inspector2.L1:
		r = **x.(**inspector2.L1)
	default:
		return nil, inspector.ErrUnsupportedType
	}
	bc := i0.countBytes(&r)
	var l inspector2.L1
	err := i0.CopyTo(&r, &l, inspector.NewByteBuffer(bc))
	return &l, err
}

func (i0 L1Inspector) CopyTo(src, dst any, buf inspector.AccumulativeBuffer) error {
	var r inspector2.L1
	switch src.(type) {
	case inspector2.L1:
		r = src.(inspector2.L1)
	case *inspector2.L1:
		r = *src.(*inspector2.L1)
	case **inspector2.L1:
		r = **src.(**inspector2.L1)
	default:
		return inspector.ErrUnsupportedType
	}
	var l *inspector2.L1
	switch dst.(type) {
	case inspector2.L1:
		return inspector.ErrMustPointerType
	case *inspector2.L1:
		l = dst.(*inspector2.L1)
	case **inspector2.L1:
		l = *dst.(**inspector2.L1)
	default:
		return inspector.ErrUnsupportedType
	}
	bb := buf.AcquireBytes()
	var err error
	if bb, err = i0.cpy(bb, l, &r); err != nil {
		return err
	}
	buf.ReleaseBytes(bb)
	return nil
}

func (i0 L1Inspector) countBytes(x *inspector2.L1) (c int) {
	if x.L2 != nil {
		if x.L2.L3 != nil {
			c += len(x.L2.L3.S)
		}
	}
	return c
}

func (i0 L1Inspector) cpy(buf []byte, l, r *inspector2.L1) ([]byte, error) {
	if r.L2 != nil {
		if l.L2 == nil {
			l.L2 = &inspector2.L2{}
		}
		if r.L2.L3 != nil {
			if l.L2.L3 == nil {
				l.L2.L3 = &inspector2.L3{}
			}
			buf, l.L2.L3.S = inspector.BufferizeString(buf, r.L2.L3.S)
			l.L2.L3.I = r.L2.L3.I
			l.L2.L3.F = r.L2.L3.F
		}
	}
	return buf, nil
}

func (i0 L1Inspector) Length(src any, result *int, path ...string) error {
	if src == nil {
		return nil
	}
	var x *inspector2.L1
	_ = x
	if p, ok := src.(**inspector2.L1); ok {
		x = *p
	} else if p, ok := src.(*inspector2.L1); ok {
		x = p
	} else if v, ok := src.(inspector2.L1); ok {
		x = &v
	} else {
		return inspector.ErrUnsupportedType
	}

	*result = 0
	if len(path) == 0 {
		return nil
	}
	if path[0] == "L2" {
		if x.L2 != nil {
			if x.L2 == nil {
				return nil
			}
			if path[1] == "L3" {
				if x.L2.L3 != nil {
					if x.L2.L3 == nil {
						return nil
					}
					if path[2] == "S" {
						*result = len(x.L2.L3.S)
						return nil
					}
				}
			}
		}
	}
	return nil
}

func (i0 L1Inspector) Capacity(src any, result *int, path ...string) error {
	if src == nil {
		return nil
	}
	var x *inspector2.L1
	_ = x
	if p, ok := src.(**inspector2.L1); ok {
		x = *p
	} else if p, ok := src.(*inspector2.L1); ok {
		x = p
	} else if v, ok := src.(inspector2.L1); ok {
		x = &v
	} else {
		return inspector.ErrUnsupportedType
	}

	*result = 0
	if len(path) == 0 {
		return nil
	}
	if path[0] == "L2" {
		if x.L2 != nil {
			if x.L2 == nil {
				return nil
			}
			if path[1] == "L3" {
				if x.L2.L3 != nil {
					if x.L2.L3 == nil {
						return nil
					}
					if path[2] == "S" {
					}
				}
			}
		}
	}
	return nil
}

func (i0 L1Inspector) Reset(x any) error {
	var origin *inspector2.L1
	_ = origin
	switch x.(type) {
	case inspector2.L1:
		return inspector.ErrMustPointerType
	case *inspector2.L1:
		origin = x.(*inspector2.L1)
	case **inspector2.L1:
		origin = *x.(**inspector2.L1)
	default:
		return inspector.ErrUnsupportedType
	}
	if origin.L2 != nil {
		if origin.L2.L3 != nil {
			origin.L2.L3.S = ""
			origin.L2.L3.I = 0
			origin.L2.L3.F = 0
		}
	}
	return nil
}
